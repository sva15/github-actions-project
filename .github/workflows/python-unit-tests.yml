name: Python Unit Tests

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        cache: 'pip'  # Enable pip caching
        
    - name: Install dependencies
      working-directory: ./calculator-project
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests and collect coverage
      working-directory: ./calculator-project
      run: |
        export PYTHONPATH=$(pwd)
        coverage run -m pytest tests/

    - name: Generate JUnit XML for test results
      working-directory: ./calculator-project
      run: |
        export PYTHONPATH=$(pwd)
        pytest tests/ --junitxml=test-results.xml

    - name: Generate coverage reports
      working-directory: ./calculator-project
      run: |
        coverage report > coverage.txt
        coverage xml

    # - name: Publish Unit Test Results
    #   uses: dorny/test-reporter@v1
    #   if: always()
    #   with:
    #     name: Python Unit Tests Report
    #     path: calculator-project/test-results.xml
    #     reporter: jest-junit

    - name: Add coverage report to step summary
      working-directory: ./calculator-project
      run: |
        echo "## Python Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat coverage.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Output coverage for PR comment
      id: coverage-output
      working-directory: ./calculator-project
      run: |
        echo "report<<EOF" >> $GITHUB_OUTPUT
        cat coverage.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
          
    - name: Check coverage threshold
      working-directory: ./calculator-project
      run: |
        coverage_percentage=$(coverage report | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
        if (( $(echo "$coverage_percentage < 80" | bc -l) )); then
          echo "Code coverage is below 80% (Current: $coverage_percentage%)"
          exit 1
        fi
        
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5
      with:
        projectBaseDir: calculator-project
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    outputs:
      coverage: ${{ steps.coverage-output.outputs.report }}

  comment-coverage:
    if: github.event_name == 'pull_request'
    needs: test
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Comment Coverage Report
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Python Coverage Report
            ```
            ${{ needs.test.outputs.coverage }}
            ```

    
