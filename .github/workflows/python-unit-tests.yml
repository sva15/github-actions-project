name: Python Unit Tests

on:
  push:
    branches: [ "main","develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        cache: 'pip'  # Enable pip caching
        
    - name: Install dependencies
      working-directory: ./calculator-project
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests and collect coverage
      working-directory: ./calculator-project
      run: |
        export PYTHONPATH=$(pwd)
        coverage run -m pytest tests/

    - name: Save pytest output to file
      working-directory: ./calculator-project
      run: |
        export PYTHONPATH=$(pwd)
        pytest tests/ > pytest.txt

    - name: Generate coverage reports
      working-directory: ./calculator-project
      run: |
        coverage report > coverage.txt
        coverage xml

    - name: Publish unit test and coverage report
      working-directory: ./calculator-project
      run: |
        echo "## Python Unit Test Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat pytest.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "## Python Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat coverage.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Check coverage threshold
      working-directory: ./calculator-project
      run: |
        coverage_percentage=$(grep TOTAL coverage.txt | awk '{print $4}' | sed 's/%//')
        echo "Coverage: $coverage_percentage%"
        if (( $(echo "$coverage_percentage < 90" | bc -l) )); then
          echo "Code coverage is below 90% (Current: $coverage_percentage%)"
          exit 1
        fi

    - name: Output coverage for PR comment
      id: coverage-output
      working-directory: ./calculator-project
      run: |
        echo "report<<EOF" >> $GITHUB_OUTPUT
        cat coverage.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: SonarQube Scan
      if: github.ref == 'refs/heads/main'
      uses: sonarsource/sonarqube-scan-action@master
      with:
        projectBaseDir: ./calculator-project
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: Publish Code Coverage Report
      uses: dorny/test-reporter@v2
      with:
        name: Code Coverage Report
        path: ./calculator-project/coverage.xml
        reporter: java-junit
        
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: "Show SonarQube Quality Gate Status value"
      if: github.ref == 'refs/heads/main'
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
    
    outputs:
      coverage: ${{ steps.coverage-output.outputs.report }}

  comment-coverage:
    if: github.event_name == 'pull_request'
    needs: test
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Comment Coverage Report
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Python Coverage Report
            ```
            ${{ needs.test.outputs.coverage }}
            ```

    
