# Service Configuration Registry
# This file defines all services in the mono repo and their deployment configurations

version: "1.0"
project:
  name: "mono-repo"
  description: "Angular Python Mono Repo Project"
  
# Global defaults that can be overridden per service
defaults:
  backend:
    runtime: "python39"
    memory: "256MB"
    timeout: "60s"
    region: "us-central1"
    entry_point: "gcp_handler"
    max_instances: 100
    min_instances: 0
  
  frontend:
    memory: "512MB"
    cpu: "1000m"
    region: "us-central1"
    max_instances: 10
    min_instances: 0

# Service definitions
services:
  # Backend Services
  user_service:
    path: "backend/services/user_service"
    type: "cloud_function"
    description: "User management service with CRUD operations"
    runtime: "python39"
    memory: "256MB"
    timeout: "60s"
    entry_point: "gcp_handler"
    
    # Environment variables
    env_vars:
      - name: "DATABASE_URL"
        value: "postgresql://user:password@localhost:5432/userdb"
        description: "Database connection string"
      - name: "ENVIRONMENT"
        value: "${ENV}"
        description: "Deployment environment"
      - name: "LOG_LEVEL"
        value: "INFO"
        description: "Logging level"
      - name: "API_BASE_URL"
        value: "https://api.example.com"
        description: "External API base URL"
      - name: "CORS_ORIGINS"
        value: "*"
        description: "Allowed CORS origins"
    
    # Secrets from Secret Manager
    secrets:
      - key: "JWT_SECRET_KEY"
        secret: "projects/${PROJECT_ID}/secrets/jwt-secret/versions/latest"
        description: "JWT signing secret"
      - key: "DB_PASSWORD"
        secret: "projects/${PROJECT_ID}/secrets/db-password/versions/latest"
        description: "Database password"
    
    # Service account (will be created by setup script)
    service_account: "user-service@${PROJECT_ID}.iam.gserviceaccount.com"
    
    # Security settings
    ingress_settings: "ALLOW_ALL"
    
    # VPC settings (optional - uncomment if using VPC)
    # vpc_connector: "projects/${PROJECT_ID}/locations/${REGION}/connectors/default"
    
    # Service-specific configurations
    config:
      max_instances: 50
      min_instances: 1
      ingress: "INGRESS_ALLOW_ALL"
      
    # Dependencies (for build order)
    dependencies: []
    
    # Health check configuration
    health_check:
      path: "/health"
      timeout: "5s"
      
  notification_service:
    path: "backend/services/notification_service"
    type: "cloud_function"
    description: "Notification service for email, SMS, and push notifications"
    runtime: "python39"
    memory: "512MB"
    timeout: "120s"
    entry_point: "gcp_handler"
    
    env_vars:
      - name: "SMTP_HOST"
        description: "SMTP server hostname"
      - name: "SMTP_PORT"
        description: "SMTP server port"
      - name: "TWILIO_ACCOUNT_SID"
        description: "Twilio account SID"
      - name: "FCM_SERVER_KEY"
        description: "Firebase Cloud Messaging server key"
      - name: "ENVIRONMENT"
        description: "Deployment environment"
      - name: "LOG_LEVEL"
        description: "Logging level"
    
    secrets:
      - name: "smtp-password"
        env_var: "SMTP_PASSWORD"
        description: "SMTP server password"
      - name: "twilio-auth-token"
        env_var: "TWILIO_AUTH_TOKEN"
        description: "Twilio authentication token"
      - name: "fcm-server-key"
        env_var: "FCM_SERVER_KEY"
        description: "Firebase Cloud Messaging server key"
    
    config:
      max_instances: 100
      min_instances: 0
      ingress: "INGRESS_ALLOW_ALL"
      
    dependencies: []
    
    health_check:
      path: "/health"
      timeout: "10s"
      
  analytics_service:
    path: "backend/services/analytics_service"
    type: "cloud_function"
    description: "Analytics service for event tracking and metrics"
    runtime: "python39"
    memory: "1GB"
    timeout: "300s"
    entry_point: "gcp_handler"
    
    env_vars:
      - name: "BIGQUERY_DATASET"
        description: "BigQuery dataset name"
      - name: "BIGQUERY_PROJECT"
        description: "BigQuery project ID"
      - name: "REDIS_HOST"
        description: "Redis server hostname"
      - name: "REDIS_PORT"
        description: "Redis server port"
      - name: "ENVIRONMENT"
        description: "Deployment environment"
      - name: "LOG_LEVEL"
        description: "Logging level"
    
    secrets:
      - name: "bigquery-service-account"
        env_var: "GOOGLE_APPLICATION_CREDENTIALS"
        description: "BigQuery service account key"
      - name: "redis-password"
        env_var: "REDIS_PASSWORD"
        description: "Redis server password"
    
    config:
      max_instances: 50
      min_instances: 0
      ingress: "INGRESS_ALLOW_ALL"
      
    dependencies: []
    
    health_check:
      path: "/health"
      timeout: "15s"

  # Frontend Service
  ui:
    path: "ui"
    type: "cloud_run"
    description: "Angular frontend application"
    
    # Docker deployment configuration
    container:
      port: 80
      dockerfile: "Dockerfile"
      
    # Resource allocation
    memory: "512MB"
    cpu: "1000m"
    
    env_vars:
      - name: "API_BASE_URL"
        description: "Backend API base URL"
      - name: "ENVIRONMENT"
        description: "Deployment environment"
      - name: "NODE_ENV"
        description: "Node.js environment"
      - name: "ANGULAR_ENV"
        description: "Angular build environment"
    
    secrets: []
    
    config:
      max_instances: 10
      min_instances: 0
      ingress: "INGRESS_ALLOW_ALL"
      allow_unauthenticated: true
      
    dependencies: 
      - "user_service"
      - "notification_service" 
      - "analytics_service"
      
    health_check:
      path: "/health"
      timeout: "10s"

# Environment-specific overrides
environments:
  prod:
    suffix: "prod"
    region: "us-central1"
    overrides:
      user_service:
        memory: "512MB"
        min_instances: 2
        max_instances: 100
      notification_service:
        memory: "1GB"
        min_instances: 1
        max_instances: 200
      analytics_service:
        memory: "2GB"
        min_instances: 1
        max_instances: 50
      ui:
        memory: "1GB"
        cpu: "2000m"
        min_instances: 1
        max_instances: 20
        
  staging:
    suffix: "staging"
    region: "us-central1"
    overrides:
      user_service:
        memory: "256MB"
        min_instances: 1
        max_instances: 10
      notification_service:
        memory: "512MB"
        min_instances: 0
        max_instances: 20
      analytics_service:
        memory: "1GB"
        min_instances: 0
        max_instances: 10
      ui:
        memory: "512MB"
        min_instances: 0
        max_instances: 5
        
  dev:
    suffix: "dev"
    region: "us-central1"
    overrides:
      user_service:
        memory: "256MB"
        min_instances: 0
        max_instances: 5
      notification_service:
        memory: "256MB"
        min_instances: 0
        max_instances: 5
      analytics_service:
        memory: "512MB"
        min_instances: 0
        max_instances: 5
      ui:
        memory: "256MB"
        min_instances: 0
        max_instances: 2
        
  hotfix:
    suffix: "hotfix"
    region: "us-central1"
    overrides:
      user_service:
        memory: "256MB"
        min_instances: 0
        max_instances: 3
      notification_service:
        memory: "256MB"
        min_instances: 0
        max_instances: 3
      analytics_service:
        memory: "512MB"
        min_instances: 0
        max_instances: 3
      ui:
        memory: "256MB"
        min_instances: 0
        max_instances: 1

# Build and deployment settings
build:
  # Docker registry settings
  registry:
    gcp: "gcr.io"
    aws: "your-account-id.dkr.ecr.us-east-1.amazonaws.com"
    
  # Build timeout
  timeout: "1200s"
  
  # Machine type for builds
  machine_type: "E2_HIGHCPU_8"
  
  # Disk size for builds
  disk_size: "100GB"

# Notification settings
notifications:
  slack:
    webhook_url_secret: "slack-webhook-url"
    channels:
      prod: "#prod-deployments"
      staging: "#staging-deployments"
      dev: "#dev-deployments"
      
  email:
    enabled: false
    recipients: []

# Monitoring and alerting
monitoring:
  enabled: true
  
  # Health check settings
  health_checks:
    interval: "30s"
    timeout: "10s"
    retries: 3
    
  # Logging
  logging:
    level: "INFO"
    structured: true
    
  # Metrics
  metrics:
    enabled: true
    custom_metrics: []

# Security settings
security:
  # IAM settings
  iam:
    service_account_email: "mono-repo-deployer@your-project.iam.gserviceaccount.com"
    
  # Network settings
  network:
    vpc_connector: ""
    egress: "PRIVATE_RANGES_ONLY"
    
  # Security scanning
  vulnerability_scanning:
    enabled: true
    fail_on_critical: true
