version: '3.8'

services:
  # Frontend Angular Application
  frontend:
    build:
      context: ./ui
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - user-service
      - notification-service
      - analytics-service
    networks:
      - app-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./backend/services/user_service
      dockerfile: Dockerfile
    ports:
      - "3001:8080"
    environment:
      - PYTHONPATH=/app
      - PORT=8080
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./backend/services/notification_service
      dockerfile: Dockerfile
    ports:
      - "3002:8080"
    environment:
      - PYTHONPATH=/app
      - PORT=8080
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  analytics-service:
    build:
      context: ./backend/services/analytics_service
      dockerfile: Dockerfile
    ports:
      - "3003:8080"
    environment:
      - PYTHONPATH=/app
      - PORT=8080
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data

  # PostgreSQL Database (optional)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=monorepo
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password123
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
